html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline; }

/* HTML5 display-role reset for older browsers */
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block; }

body {
  line-height: 1; }

ol, ul {
  list-style: none; }

blockquote, q {
  quotes: none; }

blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

@font-face {
  font-family: 'latobold';
  src: url("../fonts/lato-bol-webfont.eot");
  src: url("../fonts/lato-bol-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/lato-bol-webfont.woff") format("woff"), url("../fonts/lato-bol-webfont.ttf") format("truetype"), url("../fonts/lato-bol-webfont.svg#latobold") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'latolight';
  src: url("../fonts/lato-lig-webfont.eot");
  src: url("../fonts/lato-lig-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/lato-lig-webfont.woff") format("woff"), url("../fonts/lato-lig-webfont.ttf") format("truetype"), url("../fonts/lato-lig-webfont.svg#latolight") format("svg");
  font-weight: normal;
  font-style: normal; }

@font-face {
  font-family: 'latoregular';
  src: url("../fonts/lato-reg-webfont.eot");
  src: url("../fonts/lato-reg-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/lato-reg-webfont.woff") format("woff"), url("../fonts/lato-reg-webfont.ttf") format("truetype"), url("../fonts/lato-reg-webfont.svg#latoregular") format("svg");
  font-weight: normal;
  font-style: normal; }

body {
  font-family: 'latolight'; }

.container {
  margin: 20px auto;
  border-radius: 10px;
  padding: 60px 30px;
  box-sizing: border-box;
  overflow: hidden;
  width: 50%;
  left: 50%; }

.form-group {
  position: relative;
  font: 20px 'Open Sans Condensed'; }

input {
  background-color: #fff;
  border: 1px solid #f8f7fb;
  color: #3399ff;
  outline: none;
  font: 24px/28px 'latolight'; }

.input-text-field {
  background: none;
  display: block;
  border: none;
  position: relative;
  padding: 0;
  width: 100%;
  height: 40px;
  z-index: 900; }

.input-text-field + label {
  position: absolute;
  bottom: 0;
  width: 100%;
  height: 100%;
  padding: 0; }

.input-text-field + label:before,
.input-text-field + label:after {
  content: "";
  border-bottom: 1px solid #B9C1CA;
  width: 100%;
  height: calc(100% - 10px);
  display: inline-block;
  position: absolute;
  bottom: 0; }

.input-text-field + label:after {
  content: "";
  -webkit-transform: scaleX(0);
  transform: scaleX(0);
  height: 2px;
  background: transparent;
  display: block;
  transition: all 0.5s linear;
  -webkit-transition: all 0.5s linear;
  left: 0;
  right: 0; }

.input-text-field:focus + label:after {
  -webkit-transform: scaleX(1);
  transform: scaleX(1);
  background: #5f2879;
  -webkit-transition: 0.2s ease;
  transition: 0.2s ease; }

.input-text-field + label .input-text-span {
  width: 100%;
  display: block;
  position: absolute;
  top: 0;
  pointer-events: none;
  transition: .2s ease all; }

.input-text-field:focus + label span,
.input-text-field:valid + label span {
  transform: translate(-12%, -50%) scale(0.75);
  top: -10px; }

ul li {
  border-bottom: 1px solid #f8f7fb;
  padding: 20px 10px;
  transition: background .3s linear; }
  ul li:hover {
    cursor: pointer;
    background: #f8f7fb; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
